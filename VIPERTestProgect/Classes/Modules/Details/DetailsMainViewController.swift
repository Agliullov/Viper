//
//  DetailsMainViewController.swift
//  VIPERTestProgect
//
//  Created by Раис Аглиуллов on 15.08.2020.
//  Copyright (c) 2020 Ильдар Аглиуллов. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailsMainDisplayLogic: class {
    func displayChangeControllerMode(viewModel: DetailsMain.ChangeControllerMode.ViewModel)
    func displayFetchedOptions(viewModel: DetailsMain.FetchOptions.ViewModel)

}

class DetailsMainViewController: UIViewController {
    
    var interactor: DetailsMainBusinessLogic?
    var router: (NSObjectProtocol & DetailsMainRoutingLogic & DetailsMainDataPassing)?
    
    private let tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        tableView.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        tableView.backgroundColor = .secondarySystemBackground
        tableView.register(DetailsTableViewCell.self, forCellReuseIdentifier: String(describing: DetailsTableViewCell.self))
        return tableView
    }()
    
    private var mode: ControllerMode = .viewing

    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    private var displayedSections: [DetailsMain.DisplayedSection] = []

    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController              = self
        let interactor                  = DetailsMainInteractor()
        let presenter                   = DetailsMainPresenter()
        let router                      = DetailsMainRouter()
        viewController.interactor       = interactor
        viewController.router           = router
        interactor.presenter            = presenter
        presenter.viewController        = viewController
        router.viewController           = viewController
        router.dataStore                = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor.white
        
        tableView.frame = view.bounds
        view.addSubview(tableView)
        tableView.delegate = self
        tableView.dataSource = self
        
        fetchOptions()
    }
    
    private func fetchOptions() {
        let request = DetailsMain.FetchOptions.Request()
        interactor?.fetchOptions(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
}

extension DetailsMainViewController: DetailsMainDisplayLogic {
    
    func displayChangeControllerMode(viewModel: DetailsMain.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
    func displayFetchedOptions(viewModel: DetailsMain.FetchOptions.ViewModel) {
        displayedSections = viewModel.displayedSection
        tableView.reloadData()
    }
    
}

extension DetailsMainViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return displayedSections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedSections[section].cells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type
        
        switch cellType {
        case .description(let title, let imageName, let detailsText):
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: DetailsTableViewCell.self), for: indexPath) as! DetailsTableViewCell
            cell.setup(titleText: title, imageName: imageName, descriptionText: detailsText)
            return cell
        }
    }
    
}

extension DetailsMainViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return displayedSections[section].header
    }
    
    func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -> String? {
        return displayedSections[section].footer
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
}
