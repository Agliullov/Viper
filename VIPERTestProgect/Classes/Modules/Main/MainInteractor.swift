//
//  MainInteractor.swift
//  VIPERTestProgect
//
//  Created by Раис Аглиуллов on 15.08.2020.
//  Copyright (c) 2020 Ильдар Аглиуллов. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol MainBusinessLogic {
    func fetchNavigationTitle(request: Main.FetchTitle.Request)
    func fetchOptions(request: Main.FetchOptions.Request)
    func openDetails(request: Main.OpenDetails.Request)
    
}

protocol MainDataStore {
    var option: Options? { get set }
}

class MainInteractor: MainDataStore {
    var option: Options?
    
    var presenter: MainPresentationLogic?
    
    private let worker: MainWorker = MainWorker()
    
    private var mode: ControllerMode = .viewing {
        didSet {
            let response = Main.ChangeControllerMode.Response(mode: self.mode)
            self.presenter?.presentChangeControllerMode(response: response)
        }
    }
    
}

extension MainInteractor: MainBusinessLogic {
    
    func fetchNavigationTitle(request: Main.FetchTitle.Request) {
        mode = .updating
        DispatchQueue.main.async {
            self.worker.getTitleOptions { (titleOptions) in
                let response = Main.FetchTitle.Response(titleOption: titleOptions ?? [])
                self.presenter?.presentFetchedNavigationTitle(response: response)
                self.mode = .viewing
            }
        }
    }
    
    func fetchOptions(request: Main.FetchOptions.Request) {
        mode = .updating
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            self.worker.getMainOptions { (localOptions) in
                let response = Main.FetchOptions.Response(mainOption: localOptions ?? [])
                self.presenter?.presentFetchedOptions(response: response)
                self.mode = .viewing
            }
        }
    }
    
    func openDetails(request: Main.OpenDetails.Request) {
        worker.getMainOptions { (options) in
            guard let option = options?[request.index] else { return }
            self.option = option
            
            let response = Main.OpenDetails.Response(option: option)
            self.presenter?.presentOpenDetails(response: response)
        }
    }
    
}
