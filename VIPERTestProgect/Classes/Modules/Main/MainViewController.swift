//
//  MainViewController.swift
//  VIPERTestProgect
//
//  Created by Раис Аглиуллов on 15.08.2020.
//  Copyright (c) 2020 Ильдар Аглиуллов. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func displayFetchedNavigationTitle(viewModel: Main.FetchTitle.ViewModel)
    func displayFetchedOptions(viewModel: Main.FetchOptions.ViewModel)
    func displayChangeControllerMode(viewModel: Main.ChangeControllerMode.ViewModel)
    func displayOpenDetails(viewModel: Main.OpenDetails.ViewModel)
    
}

class MainViewController: UIViewController {
    
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    private let tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .grouped)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.autoresizingMask = [.flexibleHeight, .flexibleWidth]
        tableView.backgroundColor = .secondarySystemBackground
        tableView.register(TitleTableViewCell.self, forCellReuseIdentifier: String(describing: TitleTableViewCell.self))
        tableView.register(GalleryTableViewCell.self, forCellReuseIdentifier: String(describing: GalleryTableViewCell.self))
        return tableView
    }()
    
    private var mode: ControllerMode = .viewing
    
    private let activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView()
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.blue
        indicator.startAnimating()
        return indicator
    }()
    
    private var displayedSections: [Main.DisplayedSection] = []
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController          = self
        let interactor              = MainInteractor()
        let presenter               = MainPresenter()
        let router                  = MainRouter()
        viewController.interactor   = interactor
        viewController.router       = router
        interactor.presenter        = presenter
        presenter.viewController    = viewController
        router.viewController       = viewController
        router.dataStore            = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.frame = view.bounds
        view.addSubview(tableView)
        tableView.dataSource = self
        tableView.delegate = self
        
        fetchNavigationTitle()
        fetchOptions()
    }
    
    private func fetchNavigationTitle() {
        let request = Main.FetchTitle.Request()
        interactor?.fetchNavigationTitle(request: request)
    }
    
    private func fetchOptions() {
        let request = Main.FetchOptions.Request()
        interactor?.fetchOptions(request: request)
    }
    
    private func updateNavigationItem() {
        switch mode {
        case .viewing:
            navigationItem.setHidesBackButton(true, animated: true)
            navigationItem.setRightBarButton(nil, animated: true)
        case .editing:()
            
        case .updating:
            let rightItem = UIBarButtonItem(customView: activityIndicator)
            navigationItem.setRightBarButton(rightItem, animated: true)
        }
    }
    
    private func openDetailsViewController(index: Int) {
        let request = Main.OpenDetails.Request(index: index)
        interactor?.openDetails(request: request)
    }
    
}

extension MainViewController: MainDisplayLogic {
    
    func displayFetchedNavigationTitle(viewModel: Main.FetchTitle.ViewModel) {
        title = viewModel.titleOption.first?.titleName
    }
    
    func displayFetchedOptions(viewModel: Main.FetchOptions.ViewModel) {
        displayedSections = viewModel.displayedSection
        tableView.reloadData()
    }
    
    func displayChangeControllerMode(viewModel: Main.ChangeControllerMode.ViewModel) {
        mode = viewModel.mode
        updateNavigationItem()
    }
    
    func displayOpenDetails(viewModel: Main.OpenDetails.ViewModel) {
        self.router?.routeToDetails()
    }
    
}

extension MainViewController: UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return displayedSections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedSections[section].cells.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedSection = displayedSections[indexPath.section]
        let cellType = displayedSection.cells[indexPath.row].type
        
        switch cellType {
        case .info(let title):
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: TitleTableViewCell.self), for: indexPath) as! TitleTableViewCell
            cell.setup(titleText: title)
            return cell
        case .description(let title, let imageName):
            let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: GalleryTableViewCell.self), for: indexPath) as! GalleryTableViewCell
            cell.setup(cellText: title, imageName: imageName)
            return cell
        }
    }
    
}

extension MainViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        openDetailsViewController(index: indexPath.section)
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return displayedSections[section].header
    }
    
    func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -> String? {
        return displayedSections[section].footer
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
}
